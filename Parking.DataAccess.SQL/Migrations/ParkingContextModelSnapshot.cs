// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Parking.DataAccess.SQL;

namespace Parking.DataAccess.SQL.Migrations
{
    [DbContext(typeof(ParkingContext))]
    partial class ParkingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Parking.DataAccess.SQL.Entities.Dates", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateArrival")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateLeaving")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdPlace")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdPlace");

                    b.ToTable("Dates");
                });

            modelBuilder.Entity("Parking.DataAccess.SQL.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("IdPerson")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdPerson");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Parking.DataAccess.SQL.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Parking.DataAccess.SQL.Entities.Place", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdPerson")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdRates")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdVehicle")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdPerson");

                    b.HasIndex("IdRates");

                    b.HasIndex("IdVehicle");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("Parking.DataAccess.SQL.Entities.Rates", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CostPerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("Parking.DataAccess.SQL.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CarBrand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("IdPerson")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdPerson");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Parking.DataAccess.SQL.Entities.Dates", b =>
                {
                    b.HasOne("Parking.DataAccess.SQL.Entities.Place", "Place")
                        .WithMany("Dates")
                        .HasForeignKey("IdPlace")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Parking.DataAccess.SQL.Entities.Payment", b =>
                {
                    b.HasOne("Parking.DataAccess.SQL.Entities.Person", "Person")
                        .WithMany("Payments")
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Parking.DataAccess.SQL.Entities.Place", b =>
                {
                    b.HasOne("Parking.DataAccess.SQL.Entities.Person", "Person")
                        .WithMany("Places")
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parking.DataAccess.SQL.Entities.Rates", "Rates")
                        .WithMany("Places")
                        .HasForeignKey("IdRates")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parking.DataAccess.SQL.Entities.Vehicle", "Vehicle")
                        .WithMany("Places")
                        .HasForeignKey("IdVehicle")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Rates");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Parking.DataAccess.SQL.Entities.Vehicle", b =>
                {
                    b.HasOne("Parking.DataAccess.SQL.Entities.Person", "Person")
                        .WithMany("Vehicles")
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Parking.DataAccess.SQL.Entities.Person", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Places");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Parking.DataAccess.SQL.Entities.Place", b =>
                {
                    b.Navigation("Dates");
                });

            modelBuilder.Entity("Parking.DataAccess.SQL.Entities.Rates", b =>
                {
                    b.Navigation("Places");
                });

            modelBuilder.Entity("Parking.DataAccess.SQL.Entities.Vehicle", b =>
                {
                    b.Navigation("Places");
                });
#pragma warning restore 612, 618
        }
    }
}
